/*
 * Copyright 2018 Valiantsin Kavalenka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package stincmale.idenator;

import stincmale.idenator.doc.NotThreadSafe;

/**
 * A <i>hi</i> value generator for {@link AbstractHiLoLongIdGenerator}.
 */
@NotThreadSafe
public interface HiValueGenerator {
  /**
   * Generates the next <i>hi</i> value and returns it.
   * Each invocation of this method on the same {@link HiValueGenerator} instance must produce a unique value
   * among all values generated by this instance.
   * Some implementations may provide a stronger guarantee (which should be explicitly specified),
   * e.g. by saying that each invocation of this method of the same class must produce a unique identifier.
   * <p>
   * Some implementations may provide a stronger guarantee (which should be explicitly specified),
   * e.g. by saying that each invocation of this method on different objects (even created in different runtimes)
   * must produce a unique value given that the objects were constructed the same way. Such implementations are called persistent.
   * <p>
   * In practical cases the next value from a database sequence may be returned, making the implementation persistent.
   * <p>
   * <i>hi</i> must not be equal to {@link AbstractHiLoLongIdGenerator#UNINITIALIZED}.
   *
   * @return The next <i>hi</i> value.
   */
  long nextHi();
}
